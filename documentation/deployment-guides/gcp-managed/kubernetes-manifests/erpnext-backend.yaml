apiVersion: apps/v1
kind: Deployment
metadata:
  name: erpnext-backend
  namespace: erpnext
  labels:
    app: erpnext-backend
    component: backend
    environment: production
    version: v14
    deployment-type: managed-services
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: erpnext-backend
  template:
    metadata:
      labels:
        app: erpnext-backend
        component: backend
        environment: production
        version: v14
        deployment-type: managed-services
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/api/method/frappe.utils.response.get_response_length"
    spec:
      serviceAccountName: erpnext-ksa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - erpnext-backend
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: DoesNotExist
      initContainers:
      - name: wait-for-cloudsql
        image: gcr.io/cloudsql-docker/gce-proxy:1.35.4-alpine
        command:
        - sh
        - -c
        - |
          echo 'Starting Cloud SQL Proxy for health check...'
          /cloud_sql_proxy -instances=$DB_CONNECTION_NAME=tcp:3306 &
          PROXY_PID=$!
          
          # Wait for proxy to be ready
          until nc -z localhost 3306; do
            echo 'Waiting for Cloud SQL connection...'
            sleep 5
          done
          
          # Test database connection
          echo 'Testing database connection...'
          timeout 10 sh -c 'until nc -z localhost 3306; do sleep 1; done'
          
          echo 'Cloud SQL connection verified'
          kill $PROXY_PID
        env:
        - name: DB_CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              name: erpnext-managed-secrets
              key: db-connection-name
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      containers:
      - name: erpnext-backend
        image: frappe/erpnext-worker:v14
        envFrom:
        - configMapRef:
            name: erpnext-managed-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: erpnext-managed-secrets
              key: db-password
        - name: REDIS_AUTH
          valueFrom:
            secretKeyRef:
              name: erpnext-managed-secrets
              key: redis-auth
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/secrets/google/key.json
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9000
          name: socketio
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: sites-data
          mountPath: /home/frappe/frappe-bench/sites
        - name: assets-data
          mountPath: /home/frappe/frappe-bench/sites/assets
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /home/frappe/frappe-bench/logs
        - name: google-cloud-key
          mountPath: /var/secrets/google
          readOnly: true
        resources:
          requests:
            memory: "1.5Gi"
            cpu: "750m"
          limits:
            memory: "3Gi"
            cpu: "1500m"
        livenessProbe:
          httpGet:
            path: /api/method/ping
            port: 8000
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/method/ping
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/method/ping
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      - name: cloud-sql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.35.4-alpine
        command:
        - /cloud_sql_proxy
        - -instances=$(DB_CONNECTION_NAME)=tcp:127.0.0.1:3306
        - -credential_file=/var/secrets/google/key.json
        - -enable_iam_login
        env:
        - name: DB_CONNECTION_NAME
          valueFrom:
            secretKeyRef:
              name: erpnext-managed-secrets
              key: db-connection-name
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: google-cloud-key
          mountPath: /var/secrets/google
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 3306
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: sites-data
        persistentVolumeClaim:
          claimName: erpnext-sites-pvc
      - name: assets-data
        persistentVolumeClaim:
          claimName: erpnext-assets-pvc
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: google-cloud-key
        secret:
          secretName: gcp-service-account-key
---
apiVersion: v1
kind: Service
metadata:
  name: erpnext-backend
  namespace: erpnext
  labels:
    app: erpnext-backend
    component: backend
    deployment-type: managed-services
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
spec:
  selector:
    app: erpnext-backend
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: socketio
    port: 9000
    targetPort: 9000
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: erpnext-backend-hpa
  namespace: erpnext
  labels:
    app: erpnext-backend
    component: backend
    deployment-type: managed-services
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: erpnext-backend
  minReplicas: 3
  maxReplicas: 15
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: erpnext-backend-pdb
  namespace: erpnext
  labels:
    app: erpnext-backend
    component: backend
    deployment-type: managed-services
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: erpnext-backend
---
# Network Policy for backend service
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: erpnext-backend-netpol
  namespace: erpnext
spec:
  podSelector:
    matchLabels:
      app: erpnext-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: erpnext-frontend
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 9000
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  # Allow access to managed services (Cloud SQL, Redis)
  - to: []
    ports:
    - protocol: TCP
      port: 3306  # Cloud SQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 443   # HTTPS for GCP APIs
  # Allow internal cluster communication
  - to:
    - namespaceSelector: {}
    ports:
    - protocol: TCP
      port: 8080