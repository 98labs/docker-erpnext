# Note: This file shows the structure of secrets that need to be created
# In practice, these should be created using kubectl commands or External Secrets Operator
# DO NOT commit actual secret values to version control

apiVersion: v1
kind: Secret
metadata:
  name: erpnext-db-credentials
  namespace: erpnext
  labels:
    app: erpnext
    component: database
    deployment-type: managed-services
type: Opaque
stringData:
  # Cloud SQL database password
  password: "PLACEHOLDER_DB_PASSWORD"
  # Cloud SQL connection name
  connection-name: "PROJECT_ID:REGION:erpnext-db"
---
apiVersion: v1
kind: Secret
metadata:
  name: erpnext-admin-credentials
  namespace: erpnext
  labels:
    app: erpnext
    component: admin
type: Opaque
stringData:
  # ERPNext administrator password
  password: "PLACEHOLDER_ADMIN_PASSWORD"
---
apiVersion: v1
kind: Secret
metadata:
  name: erpnext-api-credentials
  namespace: erpnext
  labels:
    app: erpnext
    component: api
type: Opaque
stringData:
  # ERPNext API credentials
  api-key: "PLACEHOLDER_API_KEY"
  api-secret: "PLACEHOLDER_API_SECRET"
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
  namespace: erpnext
  labels:
    app: erpnext
    component: redis
    deployment-type: managed-services
type: Opaque
stringData:
  # Memorystore Redis AUTH string
  auth-string: "PLACEHOLDER_REDIS_AUTH"
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudsql-ssl-certs
  namespace: erpnext
  labels:
    app: erpnext
    component: database
    security: ssl
type: Opaque
stringData:
  # Cloud SQL SSL certificates
  client-cert.pem: "PLACEHOLDER_CLIENT_CERT"
  client-key.pem: "PLACEHOLDER_CLIENT_KEY"
  server-ca.pem: "PLACEHOLDER_SERVER_CA"
---
apiVersion: v1
kind: Secret
metadata:
  name: gcp-service-account-key
  namespace: erpnext
  labels:
    app: erpnext
    component: auth
    deployment-type: managed-services
type: Opaque
stringData:
  # Service account key for accessing managed services
  key.json: "PLACEHOLDER_SERVICE_ACCOUNT_KEY"
---
# External Secrets Operator configuration (recommended approach)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: gcpsm-secret-store
  namespace: erpnext
spec:
  provider:
    gcpsm:
      projectId: "PROJECT_ID"
      auth:
        workloadIdentity:
          clusterLocation: us-central1-a
          clusterName: erpnext-managed-cluster
          serviceAccountRef:
            name: erpnext-ksa
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: erpnext-managed-secrets
  namespace: erpnext
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: gcpsm-secret-store
    kind: SecretStore
  target:
    name: erpnext-managed-secrets
    creationPolicy: Owner
  data:
  - secretKey: admin-password
    remoteRef:
      key: erpnext-admin-password
  - secretKey: db-password
    remoteRef:
      key: erpnext-db-password
  - secretKey: api-key
    remoteRef:
      key: erpnext-api-key
  - secretKey: api-secret
    remoteRef:
      key: erpnext-api-secret
  - secretKey: redis-auth
    remoteRef:
      key: redis-auth-string
  - secretKey: db-connection-name
    remoteRef:
      key: erpnext-db-connection-name
---
# Service Account for Workload Identity
apiVersion: v1
kind: ServiceAccount
metadata:
  name: erpnext-ksa
  namespace: erpnext
  annotations:
    iam.gke.io/gcp-service-account: erpnext-managed@PROJECT_ID.iam.gserviceaccount.com
  labels:
    app: erpnext
    component: auth
    deployment-type: managed-services
---
# ClusterRole for accessing secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: erpnext
  name: erpnext-secrets-reader
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: erpnext-secrets-binding
  namespace: erpnext
subjects:
- kind: ServiceAccount
  name: erpnext-ksa
  namespace: erpnext
roleRef:
  kind: Role
  name: erpnext-secrets-reader
  apiGroup: rbac.authorization.k8s.io